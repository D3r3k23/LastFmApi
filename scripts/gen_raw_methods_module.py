from typing import *
from pathlib import Path
import argparse
from collections import namedtuple

import yaml

Param = namedtuple('Param', [
    'name',
    'default',
    'alias'
])

Method = namedtuple('Method', [
    'function_name',
    'method_name',
    'params'
])

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--methods_yaml_fn',   '-y', type=Path, default=Path('data/methods.yaml'))
    parser.add_argument('--methods_module_fn', '-m', type=Path, default=Path('src/lastfmget/raw_methods.py'))
    args = parser.parse_args()

    with open(args.methods_yaml_fn, 'r') as f:
        methodsyaml = yaml.safe_load(f)

    methods = get_methods_list(methodsyaml)
    methodsmoduletext = get_methods_module_str(methods, args.methods_yaml_fn)

    with open(args.methods_module_fn, 'w') as f:
        f.write(methodsmoduletext)

def get_methods_list(methodsyaml):
    methods = []

    paramdefaults = methodsyaml['params']['defaults'] # dict
    paramaliases  = methodsyaml['params']['aliases'] # dict
    methodgroups  = methodsyaml['groups'] # dict

    for group, groupdata in methodgroups.items(): # str, dict
        groupparams  = groupdata['common_params'] # list
        groupmethods = groupdata['methods'] # list

        for method in groupmethods: # dict
            functionname = f'{group}_{method["function"]}'
            methodname   = f'{group}.{method["method"]}'
            methodparams = method['params'] # list

            paramnames = groupparams + methodparams
            params = [
                Param(name, paramdefaults[name], paramaliases.get(name, name))
                for name in paramnames
            ]

            methods.append(Method(functionname, methodname, params))

    return methods

def get_methods_module_str(methods, src_fn):
    lines = []

    lines.append('"""')
    lines.append('Thin wrappers around Last.fm API methods.')
    lines.append('')
    lines.append(f'* Module generated by gen_raw_methods_module.py from {src_fn.name}')
    lines.append('"""')
    lines.append('from .core import __get_response')
    lines.append('')

    for method in methods:
        methodtext = get_method_str(method)
        lines.append(methodtext)
        lines.append('')

    return '\n'.join(lines)

def get_method_str(method):
    lines = []

    methodargs = [
        f'{param.alias}={param.default}' if param.default is not None else param.alias
        for param in method.params
    ]
    argstring = ', '.join(methodargs)

    payload = { wrap_str('method'): wrap_str(method.method_name) }
    for param in method.params:
        payload[wrap_str(param.name)] = param.alias

    alignwidth = max(len(key) + 1 for key in payload.keys())

    lines.append(f'def {method.function_name}_raw({argstring}):')
    lines.append(f'    """{method.method_name}"""')
    lines.append('    payload = {')

    for i, (key, val) in enumerate(payload.items()):
        lines.append(f'        {key:<{alignwidth}}: {val}{"," if i < len(payload)-1 else ""}')

    lines.append('    }')
    lines.append('    return __get_response(payload)')

    return '\n'.join(lines)

def wrap_str(s):
    return "'" + s + "'"

if __name__ == '__main__':
    main()
